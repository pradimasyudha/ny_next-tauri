version: 2.1
setup: true

commands:
  build-and-upload:
    description: "Builds the application for the specified target architecture and uploads the artifacts to OneDrive"
    parameters:
      target-arch:
        description: "The target architecture to build for"
        type: enum
        enum: ["amd64", "arm64", "darwin"]
    steps:
      - checkout
      # - when:
      #     condition:
      #       not:
      #         equal: [ "darwin", << parameters.target-arch >> ]
      #     steps:
      #       - setup_remote_docker:
      #           docker_layer_caching: true
      - restore_cache:
          name: "Restore Bun packages cache"
          keys:
            - bun-packages-{{ checksum "bun.lockb" }}
      - run:
          name: "Install dependencies with Bun"
          command: bun i --frozen-lockfile
      - save_cache:
          name: "Save Bun packages cache"
          key: bun-packages-{{ checksum "bun.lockb" }}
          paths:
            - $HOME/.bun/install/cache
      - run:
          name: "Clean up previous build artifacts"
          command: bun cleanup
      - when:
          condition:
            equal: [ "amd64", << parameters.target-arch >> ]
          steps:
            - run:
                name: "Set up and build for Android"
                command: |
                  bun setup:android
                  bun build:android
      - when:
          condition:
            not:
              equal: [ "darwin", << parameters.target-arch >> ]
          steps:
            - run:
                name: "Set up and build for Desktop and Windows"
                command: |
                  bun setup:desktop
                  bun build:desktop
                  bun build:win-<< parameters.target-arch >>
      - when:
          condition:
            equal: [ "darwin", << parameters.target-arch >> ]
          steps:
            - run:
                name: "Set up and build for iOS and macOS"
                command: |
                  bun setup:ios
                  bun build:ios
                  bun build:mac
      - run:
          name: "Upload build artifacts to OneDrive"
          command: |
            bun out
            mkdir -p $HOME/.config/rclone
            echo "${RCLONE_CONF}" | tee $HOME/.config/rclone/rclone.conf > /dev/null
            rclone copy output onedrive:ny_next-tauri/$(date +%d%m%y_%H%M%S)

executors:
  linux-amd64-executor:
    docker:
      - image: nailyudha/tauri@sha256:f9115dfaa55c8a744dbf76466bba5883a71877e5d80de18d820b87c3ff14b305
    resource_class: large
    working_directory: /home/nonroot/ny_next-tauri
    environment:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
  linux-arm64-executor:
    docker:
      - image: nailyudha/tauri@sha256:f9115dfaa55c8a744dbf76466bba5883a71877e5d80de18d820b87c3ff14b305
    resource_class: arm.medium
    working_directory: /home/nonroot/ny_next-tauri
    environment:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-arm64
  macos-executor:
    macos:
      xcode: 15.4.0
      # xcode: 16.1.0
    resource_class: macos.m1.medium.gen1
    # resource_class: m2pro.medium
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

jobs:
  build-linux-amd64:
    executor: linux-amd64-executor
    steps:
      - build-and-upload:
          target-arch: "amd64"
  build-linux-arm64:
    executor: linux-arm64-executor
    steps:
      - build-and-upload:
          target-arch: "arm64"
  build-macos:
    executor: macos-executor
    steps:
      - run:
          name: "Install dependencies via Homebrew"
          command: |
            brew install rust@1.82.0 \
                         oven-sh/bun/bun@1.1.33 \
                         rclone@1.68.2
      - build-and-upload:
          target-arch: "darwin"

workflows:
  multi-platform-build:
    jobs:
      - build-linux-amd64
      - build-linux-arm64
      - build-macos